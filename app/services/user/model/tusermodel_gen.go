// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserFieldNames          = builder.RawFieldNames(&TUser{})
	tUserRows                = strings.Join(tUserFieldNames, ",")
	tUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTUserIdPrefix       = "cache:tUser:id:"
	cacheTUserUsernamePrefix = "cache:tUser:username:"
	cacheTUserUuidPrefix     = "cache:tUser:uuid:"
)

type (
	tUserModel interface {
		Insert(ctx context.Context, data *TUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUser, error)
		FindOneByUsername(ctx context.Context, username string) (*TUser, error)
		FindOneByUuid(ctx context.Context, uuid string) (*TUser, error)
		Update(ctx context.Context, newData *TUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTUserModel struct {
		sqlc.CachedConn
		table string
	}

	TUser struct {
		Id        int64        `db:"id"`
		Uuid      string       `db:"uuid"`     // UUID
		Username  string       `db:"username"` // 用户名
		Nickname  string       `db:"nickname"` // 昵称
		Avatar    string       `db:"avatar"`   // 头像地址
		Intro     string       `db:"intro"`    // 一句话介绍
		Status    int64        `db:"status"`   // 资源状态:0默认
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newTUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTUserModel {
	return &defaultTUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`t_user`",
	}
}

func (m *defaultTUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tUserIdKey := fmt.Sprintf("%s%v", cacheTUserIdPrefix, id)
	tUserUsernameKey := fmt.Sprintf("%s%v", cacheTUserUsernamePrefix, data.Username)
	tUserUuidKey := fmt.Sprintf("%s%v", cacheTUserUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tUserIdKey, tUserUsernameKey, tUserUuidKey)
	return err
}

func (m *defaultTUserModel) FindOne(ctx context.Context, id int64) (*TUser, error) {
	tUserIdKey := fmt.Sprintf("%s%v", cacheTUserIdPrefix, id)
	var resp TUser
	err := m.QueryRowCtx(ctx, &resp, tUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserModel) FindOneByUsername(ctx context.Context, username string) (*TUser, error) {
	tUserUsernameKey := fmt.Sprintf("%s%v", cacheTUserUsernamePrefix, username)
	var resp TUser
	err := m.QueryRowIndexCtx(ctx, &resp, tUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", tUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserModel) FindOneByUuid(ctx context.Context, uuid string) (*TUser, error) {
	tUserUuidKey := fmt.Sprintf("%s%v", cacheTUserUuidPrefix, uuid)
	var resp TUser
	err := m.QueryRowIndexCtx(ctx, &resp, tUserUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", tUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserModel) Insert(ctx context.Context, data *TUser) (sql.Result, error) {
	tUserIdKey := fmt.Sprintf("%s%v", cacheTUserIdPrefix, data.Id)
	tUserUsernameKey := fmt.Sprintf("%s%v", cacheTUserUsernamePrefix, data.Username)
	tUserUuidKey := fmt.Sprintf("%s%v", cacheTUserUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.Username, data.Nickname, data.Avatar, data.Intro, data.Status, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, tUserIdKey, tUserUsernameKey, tUserUuidKey)
	return ret, err
}

func (m *defaultTUserModel) Update(ctx context.Context, newData *TUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tUserIdKey := fmt.Sprintf("%s%v", cacheTUserIdPrefix, data.Id)
	tUserUsernameKey := fmt.Sprintf("%s%v", cacheTUserUsernamePrefix, data.Username)
	tUserUuidKey := fmt.Sprintf("%s%v", cacheTUserUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uuid, newData.Username, newData.Nickname, newData.Avatar, newData.Intro, newData.Status, newData.CreatedAt, newData.UpdatedAt, newData.DeletedAt, newData.Id)
	}, tUserIdKey, tUserUsernameKey, tUserUuidKey)
	return err
}

func (m *defaultTUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTUserIdPrefix, primary)
}

func (m *defaultTUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTUserModel) tableName() string {
	return m.table
}
